#pragma once

/*
Dealership - клас, който представя каталог на колите на борсата. В него ще се пазят всички налични за продан коли, като за всяка трябва да се пази и цена, на която ще се продава. Броят на местата за коли да се подава като параметър в подходящ конструктор. Може да мислите, че колите са подредени последователно на един паркинг и в каталога се пазят подредени по същия начин данни.
За този клас трябва:
    - да реализирате метод add, който добавя кола към каталога. Тя трябва да се “паркира” на първото свободно място;
    - да реализирате метод sell, който “продава” (премахва от колекцията) кола. Методът ще приема като параметър мястото, на което е паркирана колата (започващо от 0). Ако мястото не е запълнено или не е валидно, да се хвърли подходяща грешка;
    - да реализирате възможност за извеждане на стандартния изход на статистика за всички продадени коли, съдържаща броя им и общата продажна стойност;
    - да се извежда на стандартния изход справка за всички налични коли, отговарящи на даден критерий за търсене - едно от: марка, цена по-малка от даден праг, дата на производство след подадена година. Справката за всяка кола да се състои от данните на колата и продажната ѝ цена.
*/
#include "Car.hpp"

class Dealership {

public:
    Dealership(int32_t capacity);

    Dealership(const Dealership& other);
    Dealership& operator=(const Dealership& other);

    Dealership(Dealership&& other) noexcept;
    Dealership& operator=(Dealership&& other) noexcept;

    ~Dealership() noexcept;

    bool add(Car*& car, double price);
    Car* sell(int32_t index);

    void stats();

    void printFiltered(const char* maker);
    void printFiltered(double priceCap);
    void printFiltered(const Date& dop);

private:
    Car** cars;
    double* prices;

    int32_t sells;
    double profit;

    const int32_t capacity;
};